#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct NODE {
    char sym;
    int frequency;
    struct NODE *left;
    struct NODE *right;
} NODE;

typedef struct list_of_freq {
    struct NODE *node;
    struct list_of_freq *next;
} list_of_freq;

NODE *new_node(char sym, int frequency, NODE *left, NODE *right) {
    NODE *newNode = (NODE*)malloc(sizeof(NODE));
    newNode->sym = sym;
    newNode->frequency = frequency;
    newNode->left = left;
    newNode->right = right;
    return newNode;
}

list_of_freq *create(NODE *node, list_of_freq *next) {
    list_of_freq *newList = (list_of_freq *)malloc(sizeof(list_of_freq));
    newList->node = node;
    newList->next = next;
    return newList;
}

void add_to_list(list_of_freq **list, NODE *node) {
    list_of_freq *newNode = create(node, NULL);
    if (*list == NULL || node->frequency < (*list)->node->frequency) {
        newNode->next = *list;
        *list = newNode;
    } else {
        list_of_freq *current = *list;
        while (current->next != NULL && current->next->node->frequency <= node->frequency) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

NODE *tree(list_of_freq **list) {
    while (*list != NULL && (*list)->next != NULL) {
        NODE *left = (*list)->node;
        NODE *right = (*list)->next->node;
        NODE *parent = new_node('\0', left->frequency + right->frequency, left, right);
        *list = (*list)->next->next;
        add_to_list(list, parent);
    }
    if (*list != NULL) {
        return (*list)->node;
    }
    return NULL;
}

void print(NODE *root, int *code, int top) {
    if (root->left != NULL) {
        code[top] = 0;
        print(root->left, code, top + 1);
    }
    if (root->right != NULL) {
        code[top] = 1;
        print(root->right, code, top + 1);
    }
    if (root->left == NULL && root->right == NULL) {
        printf("%c: ", root->sym);
        for (int i = 0; i < top; i++) {
            printf("%d", code[i]);
        }
        printf("\n");
    }
}

int main() {
    int frequency[256] = {0};
    char input[] = "aabbccdd";

    for (int i = 0; i < strlen(input); i++) {
        frequency[(int)input[i]]++;
    }

    list_of_freq *list = NULL;
    for (int i = 0; i < 256; i++) {
        if (frequency[i] > 0) {
            NODE *node = new_node((char)i, frequency[i], NULL, NULL);
            add_to_list(&list, node);
        }
    }

    NODE *root = tree(&list);
    int code[256];
    print(root, code, 0);

    return 0;
}
